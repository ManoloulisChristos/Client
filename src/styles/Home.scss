@property --home-mask-gradient-angle {
  syntax: '<angle>';
  inherits: true;
  initial-value: 0deg;
}
@property --home-conic-color-lightness {
  syntax: '<percentage>';
  inherits: false;
  initial-value: 100%;
}

@property --home-conic-blend-color {
  syntax: '<color>';
  inherits: true;
  initial-value: hsl(180, 51%, 20%);
}
@property --home-drop-shadow-color {
  syntax: '<color>';
  inherits: true;
  initial-value: hsl(180, 30%, 30%);
}

@property --home-letter-text-stroke-color {
  syntax: '<color>';
  inherits: true;
  initial-value: hsl(180, 35%, 45%);
}

.home {
  min-height: calc(100vh - 70px);
  width: 100%;
  display: grid;
  grid-auto-flow: row;

  justify-items: center;
  grid-template-rows: 0.5fr 1fr 0.5fr;
  align-items: center;
  position: relative;

  &__title {
    --_size-min: 2.5;
    --_size-max: 12;
    --_min-vw: 320;
    --max-vw: 3500;
    font-weight: 700;
    font-size: var(--size-clamp);

    @media (orientation: landscape) and (max-height: 500px) {
      font-size: 2.5rem;
    }
  }

  // Opacity filters and everything else for the letters that creates a stacking context must be defined here
  // otherwise the 3d breaks appart.
  &__curved-3d {
    display: inline-block;
    perspective: 500px;
    opacity: 0;
    filter: drop-shadow(var(--home-drop-shadow-color) 3px 3px 5px);
    offset-path: ellipse(55vmin 35vmin at center 45vmin);

    // In portrait mode change the position to vmax(height)
    @media (max-aspect-ratio: 1 / 1) {
      offset-path: ellipse(45vmin 35vmin at center 30vmax);
      // Tablets 600px
      @media (min-width: 37.5em) {
        offset-path: ellipse(45vmin 35vmin at center 38vmax);
      }
    }

    &--1 {
      offset-distance: 61%;
    }

    &--2 {
      offset-distance: 66%;
    }

    &--3 {
      offset-distance: 71%;
    }

    &--4 {
      offset-distance: 76%;
    }

    &--5 {
      offset-distance: 81%;
    }

    &--6 {
      offset-distance: 86%;
    }
    &--7 {
      offset-distance: 91%;
    }
  }

  &__letters-box {
    // Must be always an odd number, middle + front + back letters.
    // Middle letters traslations must cover the point of 0px in translation e.g.:
    // I want a total depth of 20px
    // Back is -10px & Front is 10px
    // Middle letters must be from -9px to +9px but i have to take in account the 0px point so its 19 total NOT 18.
    // So in order to have the divisions output integer values i always subtract 1.
    --_protrusionSize: 21;

    --_letterTextStrokeWidth: 4;

    position: relative;
    display: inline-block;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    // Make the whole box translate back to its original position before translations were applied
    // So its the whole box depth / 2 subtracting the 0px point from the total size.
    transform: translateZ(calc(((var(--_protrusionSize) - 1) / 2) * -1px));

    // animation: rotate-M 1000ms infinite linear;

    // @keyframes rotate-M {
    //   0% {
    //     transform: scale(1) translateZ(-10px) rotateY(0deg);
    //     // transform: translateZ(-10px) translateY(0px) rotateX(0deg);
    //   }

    //   100% {
    //     transform: scale(1) translateZ(-10px) rotateY(360deg);
    //     // transform: translateZ(-10px) translateY(-20px) rotateX(20deg);
    //   }
    // }
  }

  &__letter {
    color: hsl(180, 10%, 95%);
    position: absolute;

    -webkit-text-stroke: calc(var(--_letterTextStrokeWidth) * 1px)
      var(--home-letter-text-stroke-color);

    &--front {
      transform: translateZ(calc(((var(--_protrusionSize) - 1) / 2) * 1px));
    }

    &--back {
      transform: translateZ(calc(((var(--_protrusionSize) - 1) / 2) * -1px));
    }

    &--middle {
    }

    &--left {
      left: 0;
      opacity: 0;
      color: var(--home-letter-text-stroke-color);
      transform: translateX(-50%) rotateY(90deg);

      // On the letters "O O V" the "I" must be smaller due to curvature
      &-2,
      &-3,
      &-7 {
        transform: translateX(-50%) rotateY(90deg) scaleY(0.95);
      }

      &-4 {
        transform: translateX(-50%) rotateY(90deg) scaleY(0.95);
      }
    }

    &--right {
      color: var(--home-letter-text-stroke-color);
      right: 0;
      opacity: 0;
      transform: translateX(50%) rotateY(270deg);

      // On the letters "O O V" the "I" must be smaller due to curvature
      &-2,
      &-3,
      &-7 {
        transform: translateX(50%) rotateY(270deg) scaleY(0.95);
      }

      &-4 {
        transform: translateX(50%) rotateY(270deg) scaleY(0.95);
      }
    }
  }

  &__main-svg-container {
    display: grid;
    grid: [stack-row] 1fr / [stack-column] 1fr;
    position: relative;
    opacity: 0;
    z-index: 2;
    offset-rotate: 0deg;

    // Landscape
    width: 35vmin;
    // Portrait
    @media (max-aspect-ratio: 1 / 1) {
      width: 25vmax;
      // width: 55vmin;
      // Tablets 600px
      @media (min-width: 37.5em) {
        // width: 28vmax;
        width: 37.4vmin;
      }
    }

    ////// Enable for testing ///////
    // transform: scale(0.4);

    // Desktop
    // offset-path: ellipse(55vmin 35vmin at center 49vmin);
    // offset-distance: 94.5%;
    // offset-path: ray(75.5deg sides);
    // offset-distance: 51.6vmin;

    // Small<<<<
    // offset-path: ellipse(41vmin 33vmin at center 36.5vmax);
    // offset-distance: 94.5%;
    // offset-path: ray(50deg sides);
    // offset-distance: 50vmin;
    // BIG > bigger than 600px width
    // offset-path: ellipse(41vmin 28vmin at center 40vmax);
    // offset-distance: 94.5%;
    // offset-path: ray(62deg sides);
    // offset-distance: 42.5vmin;

    // @keyframes test-Z {
    //   0% {
    //     offset-path: ellipse(45vmin 15vmax at center 35vmax);
    //     transform: rotate(0turn) scale(0.4);
    //     offset-distance: 55%;
    //   }
    //   35% {
    //     offset-path: ellipse(45vmin 15vmax at center 35vmax);
    //     offset-distance: 94.5%;
    //     transform: rotate(3turn) scale(0.4);
    //   }
    //   35.001% {
    //     offset-path: ray(75.5deg sides);
    //     offset-distance: 51.6vmin;
    //   }

    //   50% {
    //     offset-distance: 20vmin;
    //   }

    //   80% {
    //     offset-distance: 0vmin;
    //     transform: rotate(7turn) scale(0.5);
    //   }
    //   100% {
    //     offset-path: ray(1080deg sides);
    //     offset-distance: 0vmin;
    //     transform: rotate(7turn) scale(1);
    //   }
    // }
  }
  &__svg-star {
    // display: none;
    grid-area: stack-row / stack-column;
    width: 100%;
    height: 100%;
    align-self: center;
    justify-self: center;
  }
  &__svg-cow {
    // display: none;
    // filter: drop-shadow(hsl(180, 30%, 30%) 5px 5px 5px);
    filter: url('#home-svg-turblulence-cow-filter')
      drop-shadow(hsl(180 30% 10%) 5px 5px 5px);
    z-index: -2;
    grid-area: stack-row / stack-column;
    align-self: center;
    justify-self: center;
    width: 25vmax;
    position: absolute;
    opacity: 0;
    // 1300px
    @media only screen and (max-width: 81.25em) {
      width: 35vmax;
    }
    // 1024px
    @media only screen and (max-width: 64em) {
      width: 35vmax;
    }
  }

  .test-mouth-bottom {
    transform-origin: center;
    transform-box: fill-box;
    transform: translateY(55px);
  }

  &__cow-ear {
    transform-box: fill-box;
    &--left {
      transform-origin: center right;
    }
    &--right {
      transform-origin: center left;
    }
  }

  &__cow-eye {
    transform-origin: center;
    transform-box: fill-box;
    &--left {
      transform: translateX(-20px) translateY(20px);
    }
    &--right {
      transform: translateX(20px) translateY(-20px);
    }
  }

  &__svg-shadow {
    &[data-display='true'] {
      display: initial;
    }
    &[data-display='false'] {
      display: none;
    }

    &[data-blur='true'] {
      filter: blur(6px);
    }
    &[data-blur='false'] {
      filter: none;
    }

    grid-area: stack-row / stack-column;
    align-self: center;
    justify-self: center;
    width: 100%;
    z-index: -1;
    position: absolute;
    // 1200px
    @media only screen and (max-width: 75em) {
      width: 95%;
    }
    // 600px
    @media only screen and (max-width: 37.5em) {
      width: 80%;
    }
  }

  &__svg-button-container {
    width: 15vmax;
    // 1200px
    @media only screen and (max-width: 75em) {
      width: 18vmax;
      align-self: start;
    }
  }

  &__svg-button {
    transform-origin: center;
    transform-box: fill-box;

    &:focus {
      outline: none;
    }
    &:focus-visible:not([aria-disabled='true']) .home__svg-button-rect-outline {
      stroke: hsl(180 100% 85%);
    }
  }
  &__svg-button-clip-rect {
    transform-origin: bottom;
    transform-box: fill-box;
  }

  &__svg-button-rect-placeholder {
    &[data-display='false'] {
      display: none;
    }
  }

  &__svg-button-letter {
    transform-origin: center;
    transform-box: fill-box;
    opacity: 0;
  }

  &__svg-glass-container {
    &[data-display='true'] {
      display: initial;
    }
    &[data-display='false'] {
      display: none;
    }

    position: absolute;
    z-index: 3;
    width: 100%;
    height: calc(100vh - 70px);
  }

  &__svg-glass-circle {
    @media only screen and (max-width: 600px) {
      r: 30;
    }
  }

  &__svg-glass-empty {
    stroke-dashoffset: 0;
  }
  &__svg-glass-full {
    stroke-dashoffset: 20;
  }

  &__svg-glass-transition-half {
    transition: stroke-dashoffset 0.5s cubic-bezier(0.16, 1, 0.3, 1);
    stroke-dashoffset: 10;

    &--0 {
      transition-delay: 0s;
    }
    &--37 {
      transition-delay: 1s;
    }
    &--34 {
      transition-delay: 1.5s;
    }
    &--42 {
      transition-delay: 1.5s;
    }
    &--6 {
      transition-delay: 2s;
    }
    &--25 {
      transition-delay: 2s;
    }
    &--11 {
      transition-delay: 2.5s;
    }
    &--20 {
      transition-delay: 2.5s;
    }
    &--12 {
      transition-delay: 2.8s;
    }
    &--43 {
      transition-delay: 2.9s;
    }
    &--32 {
      transition-delay: 3s;
    }
    &--23 {
      transition-delay: 3.3s;
    }
    &--4 {
      transition-delay: 3.3s;
    }
    &--5 {
      transition-delay: 3.3s;
    }
    &--27 {
      transition-delay: 3.4s;
    }
    &--18 {
      transition-delay: 3.5s;
    }
    &--36 {
      transition-delay: 3.5s;
    }

    &--26 {
      transition-delay: 3.6s;
    }
    &--9 {
      transition-delay: 3.7s;
    }
    &--29 {
      transition-delay: 3.8s;
    }
    &--3 {
      transition-delay: 3.8s;
    }
    &--8 {
      transition-delay: 4s;
    }
    &--41 {
      transition-delay: 4s;
    }
    &--36 {
      transition-delay: 4.1s;
    }
    &--22 {
      transition-delay: 4.15s;
    }
    &--1 {
      transition-delay: 4.25s;
    }
    &--16 {
      transition-delay: 4.3s;
    }
    &--7 {
      transition-delay: 4.35s;
    }
    &--33 {
      transition-delay: 4.4s;
    }
    &--14 {
      transition-delay: 4.45s;
    }
    &--24 {
      transition-delay: 4.5s;
    }
    &--28 {
      transition-delay: 4.55s;
    }
    &--16 {
      transition-delay: 4.6s;
    }
    &--2 {
      transition-delay: 4.65s;
    }
    &--21 {
      transition-delay: 4.7s;
    }
    &--31 {
      transition-delay: 4.75s;
    }
    &--39 {
      transition-delay: 4.8s;
    }
    &--35 {
      transition-delay: 4.85s;
    }
    &--13 {
      transition-delay: 4.9s;
    }
    &--15 {
      transition-delay: 4.95s;
    }
    &--19 {
      transition-delay: 5s;
    }
    &--38 {
      transition-delay: 5.05s;
    }
    &--40 {
      transition-delay: 5.1s;
    }
    &--30 {
      transition-delay: 5.15s;
    }
    &--17 {
      transition-delay: 5.2s;
    }
    &--10 {
      transition-delay: 5.2s;
    }
  }

  &__svg-glass-transition-full {
    transition: stroke-dashoffset 0.5s cubic-bezier(0.16, 1, 0.3, 1);
    stroke-dashoffset: 20;
    --_delay: 0.05;
    &--0 {
      // transition-delay: calc(var(--_delay) * 0s);
    }
    &--37 {
      transition-delay: calc(var(--_delay) * 1s);
    }
    &--34 {
      transition-delay: calc(var(--_delay) * 2s);
    }
    &--42 {
      transition-delay: calc(var(--_delay) * 2s);
    }
    &--6 {
      transition-delay: calc(var(--_delay) * 3s);
    }
    &--25 {
      transition-delay: calc(var(--_delay) * 3s);
    }
    &--11 {
      transition-delay: calc(var(--_delay) * 4s);
    }
    &--20 {
      transition-delay: calc(var(--_delay) * 4s);
    }
    &--12 {
      transition-delay: calc(var(--_delay) * 5s);
    }
    &--43 {
      transition-delay: calc(var(--_delay) * 6s);
    }
    &--32 {
      transition-delay: calc(var(--_delay) * 7s);
    }
    &--23 {
      transition-delay: calc(var(--_delay) * 8s);
    }
    &--4 {
      transition-delay: calc(var(--_delay) * 9s);
    }
    &--5 {
      transition-delay: calc(var(--_delay) * 9s);
    }
    &--27 {
      transition-delay: calc(var(--_delay) * 10s);
    }
    &--18 {
      transition-delay: calc(var(--_delay) * 11s);
    }
    &--36 {
      transition-delay: calc(var(--_delay) * 11s);
    }

    &--26 {
      transition-delay: calc(var(--_delay) * 12s);
    }
    &--9 {
      transition-delay: calc(var(--_delay) * 13s);
    }
    &--29 {
      transition-delay: calc(var(--_delay) * 14s);
    }
    &--3 {
      transition-delay: calc(var(--_delay) * 14s);
    }
    &--8 {
      transition-delay: calc(var(--_delay) * 15s);
    }
    &--41 {
      transition-delay: calc(var(--_delay) * 15s);
    }
    &--36 {
      transition-delay: calc(var(--_delay) * 16s);
    }
    &--22 {
      transition-delay: calc(var(--_delay) * 17s);
    }
    &--1 {
      transition-delay: calc(var(--_delay) * 18s);
    }
    &--16 {
      transition-delay: calc(var(--_delay) * 19s);
    }
    &--7 {
      transition-delay: calc(var(--_delay) * 20s);
    }
    &--33 {
      transition-delay: calc(var(--_delay) * 21s);
    }
    &--14 {
      transition-delay: calc(var(--_delay) * 22s);
    }
    &--24 {
      transition-delay: calc(var(--_delay) * 23s);
    }
    &--28 {
      transition-delay: calc(var(--_delay) * 24s);
    }
    &--16 {
      transition-delay: calc(var(--_delay) * 25s);
    }
    &--2 {
      transition-delay: calc(var(--_delay) * 26s);
    }
    &--21 {
      transition-delay: calc(var(--_delay) * 27s);
    }
    &--31 {
      transition-delay: calc(var(--_delay) * 28s);
    }
    &--39 {
      transition-delay: calc(var(--_delay) * 29s);
    }
    &--35 {
      transition-delay: calc(var(--_delay) * 30s);
    }
    &--13 {
      transition-delay: calc(var(--_delay) * 31s);
    }
    &--15 {
      transition-delay: calc(var(--_delay) * 32s);
    }
    &--19 {
      transition-delay: calc(var(--_delay) * 33s);
    }
    &--38 {
      transition-delay: calc(var(--_delay) * 34s);
    }
    &--40 {
      transition-delay: calc(var(--_delay) * 35s);
    }
    &--30 {
      transition-delay: calc(var(--_delay) * 36s);
    }
    &--17 {
      transition-delay: calc(var(--_delay) * 37s);
    }
    &--10 {
      transition-delay: calc(var(--_delay) * 38s);
    }
  }

  &__beam-wrapper {
    position: absolute;
    z-index: -3;
    width: 30px;
    height: calc(100vh - 80px);
    // transition: transform 0.4s cubic-bezier(0.77, 0.35, 1, 0.8);
    transform: scale(1, 0);
    transform-origin: bottom center;
  }

  &__beam-blur {
    position: absolute;
    z-index: -1;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      hsl(186 65.9% 60.1%),
      hsl(186 75.9% 90%),
      hsl(186 65.9% 60.1%)
    );
    filter: blur(15px);
  }

  &__beam {
    position: absolute;
    width: 100%;
    height: 100%;
    clip-path: url('#home-beam-clip');

    background: radial-gradient(
      ellipse 45% 100%,
      hsl(186 85.9% 100%),
      hsl(186 85.9% 95%),
      hsl(186 85.9% 85%),
      hsl(186 65.9% 65.1%)
    );
  }

  &__beam-bubble-container {
    position: absolute;
    inset: 0;
    display: grid;
    grid: [stack-row] 1fr / [stack-column] 1fr;
    justify-items: center;
    align-items: end;

    &[data-display='false'] {
      display: none;
    }
  }

  &__bubble-container {
    position: relative;
    grid-area: stack-row / stack-column;
    display: grid;
    grid: [stack-row] 1fr / [stack-column] 1fr;
    justify-items: center;
    align-items: end;
    width: 20vmax;
    height: 20vmax;
    transform: scale(0);
    transform-origin: bottom center;
  }

  &__bubble {
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle at 50% 65%,
      hsl(186 85.9% 95%),
      hsl(186 85.9% 86%),
      hsl(186 65.9% 60.1%)
    );
    clip-path: url('#home-bubble-clip');
  }
  &__bubble-blur-wrapper {
    filter: blur(10px);
    width: 100%;
    height: 100%;
    position: absolute;
    z-index: -1;
  }
  &__bubble-blur {
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle,
      hsl(186 85.9% 95%),
      hsl(186 85.9% 80%),
      hsl(186 65.9% 65.1%)
    );
    clip-path: url('#home-bubble-clip');
  }

  // Wrapper and inside class are used to mask the background, one from the left side and one from the right side.
  // The inside is the same as the outside but reversed on the X-axis.
  // The purpose is to open up like a fan and reveal the background.
  &__conic-wrapper {
    z-index: -1;
    position: absolute;
    inset: 0;
    width: 100%;
    height: calc(100vh - 80px);
    isolation: isolate;
    filter: blur(2px);
    mask-image: conic-gradient(
      from -90deg at center bottom,
      white 0deg var(--home-mask-gradient-angle),
      transparent 0
    );
    overflow: hidden;
    // --home-conic-blend-color: hsl(180, 51%, 20%);
  }
  &__conic-inside {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    mask-image: conic-gradient(
      from -90deg at center bottom,
      white 0deg var(--home-mask-gradient-angle),
      transparent 0
    );
    transform: scale(-1, 1);
  }
  // 4 conic gradients with blending and a size of 400% of the viewport in order to position the center at
  // the bottom and have it rotate around the center
  &__conic {
    // --test-color: hsl(180, 51%, 20%);
    // --color-test-light: hsl(180, 51%, 20%);
    // --color-test: hsl(2, 51%, 10%);
    // --color-test-light: #2c0b0a;
    // --home-conic-blend-color: hsl(180, 51%, 20%);
    position: absolute;
    inset: 0;
    width: 400%;
    height: 400%;
    mix-blend-mode: screen;
    &--1 {
      // display: none;
      background: repeating-conic-gradient(
        from -10deg,
        hsl(195 53% 10%) 0deg 20deg,
        transparent 20deg 30deg
      );
      background: repeating-conic-gradient(
        from -10deg,
        var(--home-conic-blend-color) 0deg 20deg,
        transparent 20deg 30deg
      );
      animation: home-background-conic-1 300s linear infinite;
      @keyframes home-background-conic-1 {
        from {
          transform: translate(-37.5%, -25%) rotate(0turn);
        }
        to {
          transform: translate(-37.5%, -25%) rotate(1turn);
        }
      }
    }
    &--2 {
      // display: none;
      background: repeating-conic-gradient(
        from 0deg,
        hsl(195 53% 10%) 0deg 20deg,
        transparent 20deg 30deg
      );
      background: repeating-conic-gradient(
        from 0deg,
        var(--home-conic-blend-color) 0deg 20deg,
        transparent 20deg 30deg
      );
      animation: home-background-conic-2 300s linear infinite;
      @keyframes home-background-conic-2 {
        from {
          transform: translate(-37.5%, -25%) rotate(0turn);
        }
        to {
          transform: translate(-37.5%, -25%) rotate(1turn);
        }
      }
    }

    &--3 {
      // display: none;
      background: repeating-conic-gradient(
        from 0deg,
        hsl(195 53% 10%) 0deg 20deg,
        transparent 20deg 30deg
      );
      background: repeating-conic-gradient(
        from 0deg,
        var(--home-conic-blend-color) 0deg 20deg,
        transparent 20deg 30deg
      );
      animation: home-background-conic-3 300s linear infinite;

      @keyframes home-background-conic-3 {
        from {
          transform: translate(-37.5%, -25%) rotate(0turn);
        }
        to {
          transform: translate(-37.5%, -25%) rotate(-1turn);
        }
      }
    }
    // Keeps the blending at a lighter shade (5% black) & also makes the the intro
    // with animating the custom property from 100% > 5%
    &--4 {
      display: none;
      background: conic-gradient(black 0, hsl(180 100% 5%) 0);
    }
  }
}
