/////// Warning!!! ///////
// The tooltip causes overflow when it is attached to an element at the edge of the page

// Tooltip wrapper is the anchor of the tooltip. If it is used on an element that is absolutly positioned or otherwise the anchor
// becomes the element itself and the tooltip must be a descedant of that element or provide another anchor as the parent.
.tooltip-wrapper {
  position: relative;
  inline-size: max-content;
  block-size: max-content;
}

.hidden-tooltip-50em {
  display: none;
  @media only screen and (max-width: 50em) {
    display: block;
  }
}

.hidden-tooltip-72em {
  display: none;
  @media only screen and (max-width: 72em) {
    display: block;
  }
}

// Hover only when a pointer device is detected
@media (pointer: fine) {
  // If the tooltip has wrapper it will be a sibling with the element that has-tooltip
  .has-tooltip-with-wrapper {
    &:is(:hover) ~ .tooltip {
      opacity: 1;
    }

    &:hover ~ .tooltip {
      transition-delay: 200ms;
    }
  }

  // If there is no wrapper it is a descendant
  .has-tooltip {
    &:is(:hover) .tooltip {
      opacity: 1;
    }

    &:hover .tooltip {
      transition-delay: 200ms;
    }
  }
}

.has-tooltip-with-wrapper {
  &:is(:focus-visible) ~ .tooltip {
    opacity: 1;
  }
}

.has-tooltip {
  &:is(:focus-visible) .tooltip {
    opacity: 1;
  }
}

.has-tooltip,
.has-tooltip-with-wrapper {
  // Changing the var values inside the 2nd nest is ok because it is the tooltip that gets selected and it is its own
  // variables and scope
  // Initial position
  &:not(:hover) {
    & ~ .tooltip:is([tip-position='top'], :not([tip-position])) {
      --_y: 3px;
    }
    & ~ .tooltip:is([tip-position='right'], :not([tip-position])) {
      --_x: -3px;
    }
    & ~ .tooltip:is([tip-position='bottom'], :not([tip-position])) {
      --_y: -3px;
    }
    & ~ .tooltip:is([tip-position='left'], :not([tip-position])) {
      --_x: 3px;
    }
  }
}

.tooltip {
  --_p-inline: 1.5ch;
  --_p-block: 0.75ch;
  --_triangle-size: 7px;

  --_top-tip: conic-gradient(
      from 150deg at top,
      #0000,
      #000 1deg 60deg,
      #0000 61deg
    )
    top / 100% 50% no-repeat;

  --_right-tip: conic-gradient(
      from -120deg at right,
      #0000,
      #000 1deg 60deg,
      #0000 61deg
    )
    right / 50% 100% no-repeat;

  --_bottom-tip: conic-gradient(
      from -30deg at bottom,
      #0000,
      #000 1deg 60deg,
      #0000 61deg
    )
    bottom / 100% 50% no-repeat;

  --_left-tip: conic-gradient(
      from 60deg at left,
      #0000,
      #000 1deg 60deg,
      #0000 61deg
    )
    left / 50% 100% no-repeat;

  pointer-events: none;
  user-select: none;

  position: absolute;
  z-index: 9999999999999;
  inline-size: max-content;
  max-inline-size: 25ch;
  text-align: start;
  font-size: 1rem;
  font-weight: 400;
  line-height: initial;
  padding: var(--_p-block) var(--_p-inline);
  margin: 0;
  border-radius: 6px;
  background: hsl(var(--surface4));
  color: hsl(var(--on-surface));

  box-shadow: var(--shadow-medium);

  opacity: 0;
  transform: translateX(var(--_x, 0)) translateY(var(--_y, 0)) translateZ(0);
  // fixes blurry text on animation
  backface-visibility: hidden;
  transition: opacity 0.2s ease, transform 0.2s ease;

  // use font smoothing only for dark mode because the text looks blurry
  @media (prefers-color-scheme: dark) {
    -moz-osx-font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
    font-smooth: antialiased;
  }

  [color-scheme='dark'] & {
    -moz-osx-font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
    font-smooth: antialiased;
  }

  @media only screen and (max-width: 72em) {
    font-size: 0.9rem;
  }

  @media only screen and (max-width: 22.5em) {
    max-inline-size: 18ch;
  }

  &::after {
    content: '';
    background: hsl(var(--surface4));
    position: absolute;
    z-index: -1;
    inset: 0;
    mask: var(--_tip);
  }

  &:is([tip-position='top'], :not([tip-position]), [tip-position='bottom']) {
    text-align: center;
  }

  // Top
  &:is([tip-position='top'], :not([tip-position])) {
    inset-inline-start: 50%;
    inset-block-end: calc(100% + var(--_p-block) + var(--_triangle-size));
    --_x: -50%;

    &::after {
      --_tip: var(--_bottom-tip);
      inset-block-end: calc(var(--_triangle-size) * -1);
      border-block-end: var(--_triangle-size) solid transparent;
    }
  }

  // Right
  &[tip-position='right'] {
    inset-inline-start: calc(100% + var(--_p-inline) + var(--_triangle-size));
    inset-block-end: 50%;
    --_y: 50%;

    &::after {
      --_tip: var(--_left-tip);
      inset-inline-start: calc(var(--_triangle-size) * -1);
      border-inline-start: var(--_triangle-size) solid transparent;
    }
  }

  // Bottom
  &[tip-position='bottom'] {
    inset-inline-start: 50%;
    inset-block-start: calc(100% + var(--_p-block) + var(--_triangle-size));
    --_x: -50%;

    &::after {
      --_tip: var(--_top-tip);
      inset-block-start: calc(var(--_triangle-size) * -1);
      border-block-start: var(--_triangle-size) solid transparent;
    }
  }

  // Left
  &[tip-position='left'] {
    inset-inline-end: calc(100% + var(--_p-inline) + var(--_triangle-size));
    inset-block-start: 50%;
    --_y: -50%;

    &::after {
      --_tip: var(--_right-tip);
      inset-inline-end: calc(var(--_triangle-size) * -1);
      border-block-end: var(--_triangle-size) solid transparent;
    }
  }
}
