// /* inter-300 - latin */
// @font-face {
//   font-display: swap;
//   font-family: 'Inter';
//   font-style: normal;
//   font-weight: 300;
//   src: url('./fonts/original/inter-v18-latin-300.woff2') format('woff2');
// }
// /* inter-regular - latin */
// @font-face {
//   font-display: swap;
//   font-family: 'Inter';
//   font-style: normal;
//   font-weight: 400;
//   src: url('./fonts/original/inter-v18-latin-regular.woff2') format('woff2');
// }
// /* inter-500 - latin */
// @font-face {
//   font-display: swap;
//   font-family: 'Inter';
//   font-style: normal;
//   font-weight: 500;
//   src: url('./fonts/original/inter-v18-latin-500.woff2') format('woff2');
// }
// /* inter-600 - latin */
// @font-face {
//   font-display: swap;
//   font-family: 'Inter';
//   font-style: normal;
//   font-weight: 600;
//   src: url('./fonts/original/inter-v18-latin-600.woff2') format('woff2');
// }

// @font-face {
//   font-display: swap;
//   font-family: 'Inter';
//   font-style: normal;
//   font-weight: 700;
//   src: url('./fonts/original/inter-tight-subset-v7-latin-700.woff2')
//     format('woff2');
// }

* {
  /* brand foundation */
  --brand-hue: 212;

  /* light */
  --primary-light: var(--brand-hue) 67% 39%;
  --on-primary-light: 0 0% 100%;

  --outline-light: 224 5% 48%;
  --outline-variant-light: 229 10% 79%;
  --surface0-light: var(--brand-hue) 0% 100%;
  --surface1-light: var(--brand-hue) 0% 96%;
  --surface2-light: var(--brand-hue) 0% 92%;
  --surface3-light: var(--brand-hue) 0% 89%;
  --surface4-light: var(--brand-hue) 0% 86%;
  --on-surface-light: 210 7% 11%;
  --on-surface-variant-light: 218 8% 28%;
  --secondary-light: 194 100% 26%;
  --on-secondary-light: 194 0% 100%;
  --inverse-surface-light: 225 4% 19%;
  --inverse-surface-max-light: 0 0% 0%;
  --inverse-on-surface-light: 255 15% 95%;
  --error-light: 355 70% 91%;
  --on-error-light: 354 61% 21%;
  --on-surface-error-light: 354 80% 45%;
  --error-outline-light: 354 71% 81%;
  --success-light: 153 31% 86%;
  --on-success-light: 153 69% 13%;
  --success-outline-light: 153 31% 70%;
  --shadow-color-light: 0 0% 50%;

  /* dark */
  --primary-dark: var(--brand-hue) 100% 83%;
  --on-primary-dark: var(--brand-hue) 100% 19%;
  --on-surface-dark: 255 7% 89%;
  --on-surface-variant-dark: 229 10% 79%;
  --outline-dark: 220 6% 58%;
  --outline-variant-dark: 218 8% 28%;
  --surface0-dark: var(--brand-hue) 2% 0%;
  --surface1-dark: var(--brand-hue) 2% 10%;
  --surface2-dark: var(--brand-hue) 2% 15%;
  --surface3-dark: var(--brand-hue) 2% 20%;
  --surface4-dark: var(--brand-hue) 2% 25%;
  --on-secondary-dark: 194 100% 14%;
  --secondary-dark: 194 100% 61%;
  --inverse-on-surface-dark: 210 7% 11%;
  --inverse-surface-dark: 255 7% 89%;
  --inverse-surface-max-dark: 0 0% 100%;
  --error-dark: 355 60% 11%;
  --on-error-dark: 355 70% 72%;
  --on-surface-error-dark: 355 70% 72%;
  --error-outline-dark: 355 61% 32%;
  --success-dark: 153 69% 6%;
  --on-success-dark: 152 31% 59%;
  --success-outline-dark: 152 69% 25%;
  --shadow-color-dark: 215 40% 2%;

  // Unisex
  --background-red: 354 70% 54%;

  // Shadows
  --shadow-small: 0.5px 1px 1px hsl(var(--shadow-color) / 0.7);
  --shadow-medium: 1px 2px 2px hsl(var(--shadow-color) / 0.333),
    2px 4px 4px hsl(var(--shadow-color) / 0.333),
    3px 6px 6px hsl(var(--shadow-color) / 0.333);
  --shadow-large: 1px 2px 2px hsl(var(--shadow-color) / 0.2),
    2px 4px 4px hsl(var(--shadow-color) / 0.2),
    4px 8px 8px hsl(var(--shadow-color) / 0.2),
    8px 16px 16px hsl(var(--shadow-color) / 0.2),
    16px 32px 32px hsl(var(--shadow-color) / 0.2);

  // Other
  --body-margin-default: 70px;
  --focus: 2px solid hsl(var(--primary));

  /// Dynamic Size Calculations ///

  // Inside the code block of the use-case, local variables of min-max size must be declared as plain numbers
  // This clamp function can be used for font-size as well as length units eg padding

  --root-font-size: 16; //also accessed by JS on page load if the user changed the font-size
  --min-vw: var(--_min-vw, 370);
  --max-vw: var(--_max-vw, 1500);
  --size-min: var(--_size-min, 1);
  --size-max: var(--_size-max, 2);
  // slope: m = (y2-y1)/(x2-x1)
  --slope: calc(
    (var(--size-max) - var(--size-min)) /
      ((var(--max-vw) - var(--min-vw)) / var(--root-font-size))
  );

  // b = y - mx
  // where <b> is the  y-axis-intersection and <m> is the slope

  // Caution!!! >> pixel values in widths(pixels) must be converted into rems
  --Y-axis-intersection: calc(
    var(--size-min) - (var(--slope) * (var(--min-vw) / var(--root-font-size)))
  );
  --dynamic-range: (
    (var(--Y-axis-intersection) * 1rem) + ((var(--slope) * 100) * 1vw)
  );

  --size-clamp: clamp(
    calc(var(--size-min) * 1rem),
    var(--dynamic-range),
    calc(var(--size-max) * 1rem)
  );
}

:root {
  color-scheme: light;

  /* set defaults */
  --primary: var(--primary-light);
  --on-primary: var(--on-primary-light);
  --on-surface: var(--on-surface-light);
  --on-surface-variant: var(--on-surface-variant-light);
  --outline: var(--outline-light);
  --outline-variant: var(--outline-variant-light);
  --surface0: var(--surface0-light);
  --surface1: var(--surface1-light);
  --surface2: var(--surface2-light);
  --surface3: var(--surface3-light);
  --surface4: var(--surface4-light);
  --on-secondary: var(--on-secondary-light);
  --secondary: var(--secondary-light);
  --inverse-on-surface: var(--inverse-on-surface-light);
  --inverse-surface: var(--inverse-surface-light);
  --inverse-surface-max: var(--inverse-surface-max-light);
  --error: var(--error-light);
  --on-error: var(--on-error-light);
  --on-surface-error: var(--on-surface-error-light);
  --error-outline: var(--error-outline-light);
  --success: var(--success-light);
  --on-success: var(--on-success-light);
  --success-outline: var(--success-outline-light);
  --shadow-color: var(--shadow-color-light);
  // Computed values

  --background-outline: var(--on-surface-light) / 0.08;
}

@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;

    --primary: var(--primary-dark);
    --on-primary: var(--on-primary-dark);
    --on-surface: var(--on-surface-dark);
    --on-surface-variant: var(--on-surface-variant-dark);
    --outline: var(--outline-dark);
    --outline-variant: var(--outline-variant-dark);
    --surface0: var(--surface0-dark);
    --surface1: var(--surface1-dark);
    --surface2: var(--surface2-dark);
    --surface3: var(--surface3-dark);
    --surface4: var(--surface4-dark);
    --on-secondary: var(--on-secondary-dark);
    --secondary: var(--secondary-dark);
    --inverse-on-surface: var(--inverse-on-surface-dark);
    --inverse-surface: var(--inverse-surface-dark);
    --inverse-surface-max: var(--inverse-surface-max-dark);
    --error: var(--error-dark);
    --on-error: var(--on-error-dark);
    --on-surface-error: var(--on-surface-error-dark);
    --error-outline: var(--error-outline-dark);
    --success: var(--success-dark);
    --on-success: var(--on-success-dark);
    --success-outline: var(--success-outline-dark);
    --shadow-color: var(--shadow-color-dark);

    // Computed values
    --background-outline: var(--on-surface-dark) / 0.1;
  }
}

[color-scheme='light'] {
  color-scheme: light;

  --primary: var(--primary-light);
  --on-primary: var(--on-primary-light);
  --on-surface: var(--on-surface-light);
  --on-surface-variant: var(--on-surface-variant-light);
  --outline: var(--outline-light);
  --outline-variant: var(--outline-variant-light);
  --surface0: var(--surface0-light);
  --surface1: var(--surface1-light);
  --surface2: var(--surface2-light);
  --surface3: var(--surface3-light);
  --surface4: var(--surface4-light);
  --on-secondary: var(--on-secondary-light);
  --secondary: var(--secondary-light);
  --inverse-on-surface: var(--inverse-on-surface-light);
  --inverse-surface: var(--inverse-surface-light);
  --inverse-surface-max: var(--inverse-surface-max-light);
  --error: var(--error-light);
  --on-error: var(--on-error-light);
  --on-surface-error: var(--on-surface-error-light);
  --error-outline: var(--error-outline-light);
  --success: var(--success-light);
  --on-success: var(--on-success-light);
  --success-outline: var(--success-outline-light);
  --shadow-color: var(--shadow-color-light);

  // Computed values
  --background-outline: var(--on-surface-light) / 0.08;
}

[color-scheme='dark'] {
  color-scheme: dark;

  --primary: var(--primary-dark);
  --on-primary: var(--on-primary-dark);
  --on-surface: var(--on-surface-dark);
  --on-surface-variant: var(--on-surface-variant-dark);
  --outline: var(--outline-dark);
  --outline-variant: var(--outline-variant-dark);
  --surface0: var(--surface0-dark);
  --surface1: var(--surface1-dark);
  --surface2: var(--surface2-dark);
  --surface3: var(--surface3-dark);
  --surface4: var(--surface4-dark);
  --on-secondary: var(--on-secondary-dark);
  --secondary: var(--secondary-dark);
  --inverse-on-surface: var(--inverse-on-surface-dark);
  --inverse-surface: var(--inverse-surface-dark);
  --inverse-surface-max: var(--inverse-surface-max-dark);
  --error: var(--error-dark);
  --on-error: var(--on-error-dark);
  --on-surface-error: var(--on-surface-error-dark);
  --error-outline: var(--error-outline-dark);
  --success: var(--success-dark);
  --on-success: var(--on-success-dark);
  --success-outline: var(--success-outline-dark);
  --shadow-color: var(--shadow-color-dark);

  // Computed values
  --background-outline: var(--on-surface-dark) / 0.1;
}

// Global Reset
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  @media (prefers-reduced-motion: no-preference) {
    scroll-behavior: smooth;
  }
}

body {
  font-family: 'Inter', system-ui, 'Segoe UI', 'Roboto', Helvetica, Arial,
    sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';

  color: hsl(var(--on-surface));
  background-color: hsl(var(--surface1));
  min-block-size: 100vh;
}

a {
  text-decoration: none;
  color: inherit;
}

li {
  list-style-type: none;
}

button {
  border: none;
  font-family: inherit;
  touch-action: manipulation;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  &:hover {
    cursor: pointer;
  }
}

h1,
h2,
h3,
h4,
h5,
h6,
strong {
  font-weight: 600;
}

.visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  width: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
}

// Imply the element is disabled when forced colors is enabled
@media (forced-colors: active) {
  [aria-disabled='true'] {
    border-color: GrayText;
    color: GrayText;
  }
}

// Generic class for all the svg elements inside the Icons component
.icons-default {
  stroke: hsl(var(--on-surface));
}
